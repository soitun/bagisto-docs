import{_ as t,a,o as n,ag as o}from"./chunks/framework.C2qfZH9T.js";const m=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"payment-method-development/getting-started.md","filePath":"payment-method-development/getting-started.md","lastUpdated":1759761869000}'),r={name:"payment-method-development/getting-started.md"};function s(i,e,l,d,p,h){return n(),a("div",null,e[0]||(e[0]=[o(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">â€‹</a></h1><p>Creating custom payment methods in Bagisto allows you to integrate any payment gateway or processor with your store. Whether you need local payment methods, cryptocurrency payments, or specialized payment flows, custom payment methods provide the flexibility your business requires.</p><p>For our tutorial, we&#39;ll create a <strong>Custom Stripe Payment</strong> method that demonstrates all the essential concepts you need to build any type of payment solution.</p><div class="info custom-block"><p class="custom-block-title">What You&#39;ll Learn</p><p>By the end of this guide, you&#39;ll be able to:</p><ul><li>Understand Bagisto&#39;s payment architecture</li><li>Create custom payment methods using generator or manual approaches</li><li>Configure admin interfaces for payment settings</li></ul></div><h2 id="understanding-bagisto-payment-architecture" tabindex="-1">Understanding Bagisto Payment Architecture <a class="header-anchor" href="#understanding-bagisto-payment-architecture" aria-label="Permalink to &quot;Understanding Bagisto Payment Architecture&quot;">â€‹</a></h2><p>Bagisto&#39;s payment system is built around a flexible method-based architecture that separates configuration from business logic:</p><h3 id="core-components" tabindex="-1">Core Components <a class="header-anchor" href="#core-components" aria-label="Permalink to &quot;Core Components&quot;">â€‹</a></h3><table tabindex="0"><thead><tr><th>Component</th><th>Purpose</th><th>Location</th></tr></thead><tbody><tr><td><strong>Payment Methods Configuration</strong></td><td>Defines payment method properties</td><td><code>Config/payment-methods.php</code></td></tr><tr><td><strong>Payment Classes</strong></td><td>Contains payment processing logic</td><td><code>Payment/ClassName.php</code></td></tr><tr><td><strong>System Configuration</strong></td><td>Admin interface forms</td><td><code>Config/system.php</code></td></tr><tr><td><strong>Service Provider</strong></td><td>Registers payment method</td><td><code>Providers/ServiceProvider.php</code></td></tr></tbody></table><h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">â€‹</a></h3><ul><li><strong>Flexible Payment Processing</strong>: Support for redirects, APIs, webhooks, or custom flows</li><li><strong>Configuration Management</strong>: Admin-friendly settings interface</li><li><strong>Multi-channel Support</strong>: Different settings per sales channel</li><li><strong>Security Ready</strong>: Built-in CSRF protection and secure handling</li><li><strong>Extensible Architecture</strong>: Easy integration with third-party gateways</li></ul><h2 id="development-workflow" tabindex="-1">Development Workflow <a class="header-anchor" href="#development-workflow" aria-label="Permalink to &quot;Development Workflow&quot;">â€‹</a></h2><p>The typical workflow for creating a custom payment method follows these steps:</p><h3 id="_1-create-your-payment-method" tabindex="-1">1. Create Your Payment Method <a class="header-anchor" href="#_1-create-your-payment-method" aria-label="Permalink to &quot;1. Create Your Payment Method&quot;">â€‹</a></h3><p>Choose between package generator (quick) or manual setup (educational) to create a complete working payment method.</p><p><strong>ðŸ“– <a href="./create-your-first-payment-method.html">Create Your First Payment Method â†’</a></strong></p><p>This section shows you how to build a complete working payment method, then the remaining sections help you understand how to customize each component.</p><h3 id="_2-understand-payment-configuration" tabindex="-1">2. Understand Payment Configuration <a class="header-anchor" href="#_2-understand-payment-configuration" aria-label="Permalink to &quot;2. Understand Payment Configuration&quot;">â€‹</a></h3><p>Learn how payment configuration works and how to customize payment method properties.</p><p><strong>ðŸ“– Next:</strong> <a href="./understanding-payment-configuration.html">Understanding Payment Configuration</a></p><h3 id="_3-understand-payment-logic" tabindex="-1">3. Understand Payment Logic <a class="header-anchor" href="#_3-understand-payment-logic" aria-label="Permalink to &quot;3. Understand Payment Logic&quot;">â€‹</a></h3><p>Explore how the payment class handles processing and payment method behavior.</p><p><strong>ðŸ“– Next:</strong> <a href="./understanding-payment-class.html">Understanding Payment Class</a></p><p>You&#39;ll have a complete working payment method after step 1, and steps 2-3 help you understand how to customize and extend it.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">â€‹</a></h2><p>Before you begin, ensure you have:</p><ul><li><strong>Bagisto Installation</strong>: A working Bagisto development environment</li><li><strong>PHP Knowledge</strong>: Familiarity with PHP 8.2+ and Laravel concepts</li><li><strong>Package Development</strong>: Basic understanding of Laravel service providers (<a href="./../package-development/getting-started.html">Package Development Guide</a>)</li><li><strong>Development Tools</strong>: Composer, Git, and a code editor</li></ul><div class="tip custom-block"><p class="custom-block-title">Quick Start Path</p><p><strong>New to Bagisto?</strong> Start with the <a href="./create-your-first-payment-method.html#method-1-using-bagisto-package-generator-quick-setup">package generator approach</a> for your first payment method.</p><p><strong>Want to understand everything?</strong> Follow the <a href="./create-your-first-payment-method.html#method-2-manual-setup-complete-understanding">manual setup approach</a> for complete control and learning.</p></div><h2 id="what-you-ll-build" tabindex="-1">What You&#39;ll Build <a class="header-anchor" href="#what-you-ll-build" aria-label="Permalink to &quot;What You&#39;ll Build&quot;">â€‹</a></h2><p>Throughout this guide, you&#39;ll create a <strong>Custom Stripe Payment</strong> method that includes:</p><h3 id="core-features" tabindex="-1">Core Features <a class="header-anchor" href="#core-features" aria-label="Permalink to &quot;Core Features&quot;">â€‹</a></h3><ul><li>âœ… <strong>Basic Payment Processing</strong>: Without redirect url</li><li>âœ… <strong>Admin Configuration</strong>: Complete settings interface in Bagisto admin</li><li>âœ… <strong>Order Integration</strong>: Seamless integration with Bagisto&#39;s order system</li><li>âœ… <strong>Multi-channel Support</strong>: Different value per sales channel</li></ul><h2 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to &quot;Architecture Overview&quot;">â€‹</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Custom Stripe Payment Package</span></span>
<span class="line"><span>â”œâ”€â”€ src/</span></span>
<span class="line"><span>â”‚   â”œâ”€â”€ Payment/</span></span>
<span class="line"><span>â”‚   â”‚   â””â”€â”€ CustomStripePayment.php     # Payment processing logic</span></span>
<span class="line"><span>â”‚   â”œâ”€â”€ Config/</span></span>
<span class="line"><span>â”‚   â”‚   â”œâ”€â”€ payment_methods.php         # Payment method definition</span></span>
<span class="line"><span>â”‚   â”‚   â””â”€â”€ system.php                  # Admin interface configuration</span></span>
<span class="line"><span>â”‚   â””â”€â”€ Providers/</span></span>
<span class="line"><span>â”‚       â””â”€â”€ ServiceProvider.php         # Package registration</span></span>
<span class="line"><span>â”œâ”€â”€ composer.json                       # Package metadata</span></span>
<span class="line"><span>â””â”€â”€ README.md                           # Documentation</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Development Time Estimate</p><ul><li><strong>Basic Implementation</strong>: 2-3 hours (using generator)</li><li><strong>Custom Logic</strong>: 4-6 hours (manual setup + payment integration)</li><li><strong>Testing &amp; Polish</strong>: 2-4 hours (admin testing, payment flow validation)</li></ul></div><h2 id="ready-to-start" tabindex="-1">Ready to Start? <a class="header-anchor" href="#ready-to-start" aria-label="Permalink to &quot;Ready to Start?&quot;">â€‹</a></h2><p>Choose your learning path and begin building your custom payment method:</p><p><strong>ðŸš€ <a href="./create-your-first-payment-method.html">Create Your First Payment Method â†’</a></strong></p><p>This section covers both package generator and manual approaches, helping you understand the foundations while building a working payment method.</p>`,38)]))}const u=t(r,[["render",s]]);export{m as __pageData,u as default};
